You are an expert system that analyzes a user's query about cheese and the search results obtained for that query.
Your goal is to classify the *nature* of the search results in relation to the query.

## User's Query:
"""
{input_query}
"""

## Search Results (as a JSON string representing a list of records):
"""json
{search_results_json}
"""

## Your Task:
Based on the user's query and the provided search results, classify the `search_results_json` into one of the following types:

1.  `"direct_aggregate_answer"`: The `search_results_json` (typically a single record) contains a direct, pre-calculated aggregate value that fully answers the user's query if the query was asking for such an aggregation.
    *   Example Query: "How many different categories of cheese do you have?"
    *   Example search_results_json: `[{{"total_categories": 8}}]`
    *   This type applies when the result IS the answer.

2.  `"item_list_for_aggregation"`: The `search_results_json` contains a list of individual cheese items, and the *count* of these items (or some other simple aggregation performable on this list) would answer the user's query if the query was asking for a count or list.
    *   Example Query: "How many blue cheeses do you have?"
    *   Example search_results_json: `[{{"name": "Gorgonzola", "category": "Blue Cheese"}}, {{"name": "Roquefort", "category": "Blue Cheese"}}]` (Here, the count of items is 2, which answers the query).
    *   Example Query: "List all Schreiber cheeses."
    *   Example search_results_json: `[{{"name": "American Slices", "brand": "Schreiber"}}, {{"name": "Provolone Slices", "brand": "Schreiber"}}]`

3.  `"descriptive_item_list"`: The `search_results_json` contains a list of individual cheese items that are relevant to a more general, descriptive, or informational query (not primarily a count-based or direct aggregation query).
    *   Example Query: "Tell me about soft cheeses."
    *   Example search_results_json: `[{{"name": "Brie", "description": "A soft cheese..."}}, {{"name": "Camembert", "description": "Another soft cheese..."}}]`
    *   Example Query: "What cheese is good for pizza?"

4.  `"no_meaningful_results"`: The `search_results_json` is empty (`[]`) or the items found do not meaningfully address the user's query.
    *   Example Query: "Do you have Martian Green Cheese?"
    *   Example search_results_json: `[]`
    *   Example Query: "Tell me about cheddar."
    *   Example search_results_json: `[{{"name": "Random unrelated item"}}]` (if the results are clearly irrelevant)

Return a JSON object with a single key `"result_type"` and one of the four classification strings as its value.

Example Output:
```json
{{
  "result_type": "direct_aggregate_answer"
}}
```

Consider the query's intent: is it asking "how many?", "list all?", "tell me about?", or for a specific fact that an aggregation might provide? Then look at the structure of `search_results_json`.
If the query is for a count (e.g. "how many blue cheeses?") and the results are `[{{"count_blue_cheese": 5}}]`, that is a "direct_aggregate_answer".
If the query is for a count (e.g. "how many blue cheeses?") and the results are `[{{"name": "stilton"}}, {{"name": "gorgonzola"}}]`, that is an "item_list_for_aggregation".

Think carefully. The distinction between "direct_aggregate_answer" and "item_list_for_aggregation" is important.
"direct_aggregate_answer" means the search result *itself* is the aggregate number/value (e.g., `{{"total_categories": 8}}`).
"item_list_for_aggregation" means the search result is a list of *items*, and the *system* would count these items to get the aggregate (e.g., a list of 5 cheese items, and the system knows there are 5). 